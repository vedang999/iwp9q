[
  {
    "question": "1. What is REST API?",
    "answer": "REST API (Representational State Transfer Application Programming Interface) is an architectural style for designing networked applications, allowing communication between a client and server over HTTP using standard CRUD (Create, Read, Update, Delete) operations. Here's an explanation of REST API:<br><br><ul><li><strong>HTTP Methods:</strong><ul><li><strong>GET:</strong> Retrieve data from a specified resource.</li><li><strong>POST:</strong> Create a new resource or submit data to be processed on a specified resource.</li><li><strong>PUT:</strong> Update a specified resource or create it if it doesn't exist.</li><li><strong>DELETE:</strong> Remove a specified resource.</li></ul></li><li><strong>Stateless:</strong> REST APIs are stateless, meaning each request from a client to a server must contain all the information needed to understand and fulfill the request. No client context is stored on the server between requests.</li><li><strong>Resource-Based:</strong> In REST, resources (e.g., data objects) are identified by URIs (Uniform Resource Identifiers), and interactions with these resources are performed using standard HTTP methods.</li><li><strong>Example:</strong> Using REST API to retrieve a list of products from a server:<br><code>GET /api/products</code><br>This request retrieves a list of products from the server, and the response typically includes a representation of those products in a specified format, such as JSON or XML.</li></ul></li></ul>"
  },
  {
    "question": "2. What are http and https protocols? Explain in detail the following http methods..\n a. GET \nb. POST\nc. PUT",
      "answer": "HTTP (Hypertext Transfer Protocol) is a protocol used for transmitting data over the internet, while HTTPS is a secure version of HTTP.<br><br>HTTP methods:<br><ol><li>GET: Retrieves data from a specified resource.</li><li>POST: Submits data to be processed to a specified resource.</li><li>PUT: Updates a specified resource or creates it if it doesn't exist.</li></ol>"      },
  {
    "question": "3. Explain the following with a component diagram 3 tier architecture",
    "answer": "Three-tier architecture consists of Presentation (UI), Business Logic (Application Logic), and Data Storage layers. The presentation layer interacts with the business logic layer, which in turn interacts with the data storage layer.<br><br><img src='https://www.researchgate.net/profile/Santi-Caballe/publication/277187696/figure/fig1/AS:613958725672966@1523390575480/3-tier-architecture.png' alt='3-Tier Architecture Diagram'><br><br>Additional points:<br>- The presentation layer handles user interface and user interaction.<br>- The business logic layer contains application-specific logic and processes user requests.<br>- The data storage layer manages data storage and retrieval operations."
  },
  {
  "question": "4. What are different array methods in JavaScript? Explain with examples",
    "answer": "Here are some common array methods in JavaScript with brief explanations:<br><ol><li>push: Adds one or more elements to the end of an array.</li><li>pop: Removes and returns the last element from an array.</li><li>shift: Removes and returns the first element from an array.</li><li>unshift: Adds one or more elements to the beginning of an array.</li><li>splice: Adds, removes, or replaces elements at a specified index.</li><li>slice: Returns a shallow copy of a portion of an array.</li><li>map: Creates a new array by applying a function to each element.</li><li>filter: Creates a new array with elements that pass a test.</li></ol>"
  },

  {
    "question": "5. What is difference between let, var and const in javascript?    ",
    "answer": "In JavaScript, 'let' and 'const' are block-scoped variables, while 'var' is function-scoped. Here are the key differences:<br><br><ul><li><strong>Scope:</strong><ul><li>'var' is function-scoped, accessible anywhere within the function it's declared in.</li><li>'let' and 'const' are block-scoped, only accessible within the block where they are declared.</li></ul></li><li><strong>Reassignment:</strong><ul><li>'var' variables can be reassigned multiple times within their scope.</li><li>'let' variables can also be reassigned within their scope.</li><li>'const' variables, once assigned a value, cannot be reassigned; they are constant.</li></ul></li><li><strong>Hoisting:</strong><ul><li>'var' declarations are hoisted to the top of their function or global scope, but their initializations remain where they are.</li><li>'let' and 'const' declarations are hoisted to the top of their block but are not initialized until the actual declaration is encountered in the code. You can't access them before their declaration.</li></ul></li><li><strong>Temporal Dead Zone (TDZ):</strong><ul><li>'let' and 'const' variables are in the Temporal Dead Zone (TDZ) from the start of their block until their declaration is encountered, preventing access before the declaration.</li></ul></li></ul>"
  },
  {
    "question": "6. What is AJAX? Explain with examples..    ",
    "answer": "AJAX (Asynchronous JavaScript and XML) is a technique for making asynchronous HTTP requests to a server from a web page without reloading the entire page. Here's an explanation with examples:<br><br><ul><li><strong>Definition:</strong> AJAX allows web pages to send and receive data from a server without disrupting the user's experience.</li><li><strong>Example:</strong> Using the fetch API to load data from a server without refreshing the page.<br><br><code>// Example using the fetch API to fetch data from a server</code><br><code>fetch('https://api.example.com/data')</code><br><code>  .then(response => response.json())</code><br><code>  .then(data => {</code><br><code>    // Process and display the data on the web page</code><br><code>    console.log(data);</code><br><code>  })</code><br><br>This example demonstrates how AJAX allows you to retrieve data from a server in the background and update the web page dynamically, providing a smoother and more interactive user experience.</li></ul></li></ul>"
  },
  {
    "question": "7. What is a single page application?    ",
    "answer": "A Single Page Application (SPA) is a web application or website that loads and interacts with content dynamically on a single web page, without the need for complete page reloads. Here's an explanation of SPAs:<br><br><ul><li><strong>Dynamic Content:</strong> SPAs retrieve and display content from the server as the user interacts with the application, typically through asynchronous requests.</li><li><strong>Smooth User Experience:</strong> SPAs provide a smoother and more responsive user experience since they avoid full page reloads, resulting in faster transitions between views and reduced server load.</li><li><strong>Client-Side Routing:</strong> SPAs often use client-side routing to manage navigation within the application, allowing different views or components to be displayed based on the URL without contacting the server.</li><li><strong>JavaScript Frameworks:</strong> SPAs are commonly built using JavaScript frameworks and libraries like React, Angular, or Vue.js, which facilitate the development of dynamic and interactive user interfaces.</li><li><strong>Examples:</strong> Notable examples of SPAs include social media platforms like Facebook and Twitter, as well as web applications like Gmail.</li></ul></li></ul>"
  },
  {
    "question": "8. What is a component in angular?.    ",
    "answer": "In Angular, a component is a fundamental building block of the application. Here's an explanation of Angular components:<br><br><ul><li><strong>Composition:</strong> A component combines a template, logic, and styles to define a specific part of the user interface (UI).</li><li><strong>Reusability:</strong> Components are designed for reusability, allowing you to create modular and self-contained pieces of the UI that can be used across the application.</li><li><strong>Encapsulation:</strong> Components encapsulate their functionality, meaning their logic and styles are scoped to that specific component, preventing conflicts with other parts of the application.</li><li><strong>Communication:</strong> Components can communicate with other components through input and output properties, enabling parent-child relationships and data sharing.</li><li><strong>Example:</strong> For example, in an e-commerce application, you might have a 'ProductList' component responsible for displaying a list of products, and a 'ProductDetail' component for showing detailed information about a selected product. Each of these components would have its own template, logic, and styles.</li></ul></li></ul>"
  },
  {
    "question": "9. Explain with syntax the following directives:\na. ngFor\nb. ngIf",
    "answer": "In Angular, directives are special markers in the DOM that tell Angular to attach behavior to an element. Here's an explanation of the 'ngFor' and 'ngIf' directives along with their syntax:<br><br><ul><li><strong>ngFor Directive:</strong><ul><li><strong>Syntax:</strong> The 'ngFor' directive is used for iterating over a collection and rendering elements for each item in the collection.</li><li><strong>Example:</strong> Using 'ngFor' to iterate over an array in a component's template:<br><code>&lt;ul&gt;<br>  &lt;li *ngFor=\"let item of items\"&gt;{{ item }}&lt;/li&gt;<br>&lt;/ul&gt;</code><br>This code iterates over the 'items' array in the component and renders a list item for each item in the array.</li></ul></li><li><strong>ngIf Directive:</strong><ul><li><strong>Syntax:</strong> The 'ngIf' directive is used for conditionally rendering elements based on a condition.</li><li><strong>Example:</strong> Using 'ngIf' to conditionally display an element:<br><code>&lt;div *ngIf=\"showElement\"&gt;This element is displayed conditionally.&lt;/div&gt;</code><br>In this example, 'showElement' is a variable in the component, and the 'div' element is displayed only if the condition 'showElement' is true.</li></ul></li></ul>"
  }
]
